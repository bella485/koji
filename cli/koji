#!/usr/bin/python
# coding=utf-8

# command line interface for the Koji build system
# Copyright (c) 2005-2014 Red Hat, Inc.
#
#    Koji is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation;
#    version 2.1 of the License.
#
#    This software is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this software; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
#
# Authors:
#       Dennis Gregorovic <dgregor@redhat.com>
#       Mike McLean <mikem@redhat.com>
#       Mike Bonnet <mikeb@redhat.com>
#       Cristian Balint <cbalint@redhat.com>

from __future__ import absolute_import
from __future__ import division

import logging
import os
import sys

import six.moves.xmlrpc_client

import koji
from koji_cli import commands
from koji_cli.lib import CommandExports, get_options

for n, v in six.iteritems(vars(commands)):
    if not isinstance(v, six.class_types) and callable(v):
        setattr(CommandExports, n, staticmethod(v))


def fix_pyver(options, logger):
    '''Attempt to run under the correct python version, if requested'''
    pyver = getattr(options, 'pyver', None)
    if not pyver:
        return
    if pyver not in [2, 3]:
        logger.warning('Invalid python version requested: %s', pyver)
    if sys.version_info[0] == pyver:
        return
    py_exec = '/usr/bin/python%i' % pyver
    if not os.path.exists(py_exec):
        logger.error('No such file: %s', py_exec)
        return
    args = list(sys.argv)
    args.insert(0, py_exec)
    logger.debug('Executing via %s', py_exec)
    logger.debug('args = %r', args)
    try:
        os.execvp(py_exec, args)
    except Exception:
        logger.exception('Unable to execute with requested python version')


if __name__ == "__main__":
    global options
    options, command, args = get_options()

    logger = logging.getLogger("koji")
    handler = logging.StreamHandler(sys.stderr)
    handler.setFormatter(
        logging.Formatter('%(asctime)s [%(levelname)s] %(name)s: %(message)s'))
    handler.setLevel(logging.DEBUG)
    logger.addHandler(handler)
    if options.debug:
        logger.setLevel(logging.DEBUG)
    elif options.quiet:
        logger.setLevel(logging.ERROR)
    else:
        logger.setLevel(logging.WARN)

    fix_pyver(options, logger)

    session_opts = koji.grab_session_options(options)
    session = koji.ClientSession(options.server, session_opts)
    rv = 0
    try:
        rv = getattr(CommandExports, command).__call__(options, session, args)
        if not rv:
            rv = 0
    except (KeyboardInterrupt, SystemExit):
        rv = 1
    except:
        if options.debug:
            raise
        else:
            exctype, value = sys.exc_info()[:2]
            rv = 1
            print("%s: %s" % (exctype.__name__, value))
    try:
        session.logout()
    except:
        pass
    sys.exit(rv)
