import logging
from .db import (
    DeleteProcessor as DeleteProcessor,
    InsertProcessor as InsertProcessor,
    QueryProcessor as QueryProcessor,
    UpdateProcessor as UpdateProcessor,
    nextval as nextval)
from _typeshed import Incomplete
from typing import Any, Tuple, TypeAlias

RetryWhitelist: list[str]
AUTH_METHODS: list[str]
logger: logging.Logger

_SessionInfo: TypeAlias = dict[str, Any]

class Session:
    logged_in: bool
    id: int | None
    master: int | None
    key: str | None
    user_id: int | None
    authtype: int | None
    hostip: str | None
    user_data: dict[str, Any]
    message: str
    exclusive: bool
    lockerror: str | None
    callnum: int | None
    session_data: _SessionInfo
    def __init__(self,
                 args: None = ...,
                 hostip: str | None = ...) -> None: ...
    def __getattr__(self, name: str) -> dict | list | int: ...
    def validate(self) -> bool: ...
    def get_remote_ip(self, override: str | None = ...) -> str: ...
    def checkLoginAllowed(self, user_id: str) -> None: ...
    def login(self,
              user: str,
              password: str,
              opts: dict[str, Any] | None = ...,
              renew: bool = ...,
              exclusive: bool = ...) -> _SessionInfo: ...
    def getConnInfo(self) -> Tuple[str, int, str, int]: ...
    def sslLogin(self,
                 proxyuser: str | None = ...,
                 proxyauthtype: int | None = ...,
                 renew: bool = ...,
                 exclusive: bool | None = ...) -> _SessionInfo: ...
    def makeExclusive(self, force: bool = ...) -> None: ...
    def makeShared(self) -> None: ...
    def logout(self, session_id: int | None = ...) -> None: ...
    def logoutChild(self, session_id: int) -> None: ...
    def createSession(self,
                      user_id: int,
                      hostip: str,
                      authtype: int,
                      master: int | None = ...,
                      renew: bool = ...) -> _SessionInfo: ...
    def subsession(self) -> _SessionInfo: ...
    def getPerms(self) -> list[str]: ...
    def hasPerm(self, name: str) -> bool: ...
    def assertPerm(self, name: str) -> None: ...
    def assertLogin(self) -> None: ...
    def hasGroup(self, group_id: int) -> bool: ...
    def isUser(self, user_id: int) -> bool: ...
    def assertUser(self, user_id: int) -> None: ...
    def getHostId(self) -> int: ...
    def getUserId(self, username: str) -> int: ...
    def getUserIdFromKerberos(self, krb_principal: str) -> int: ...
    def createUser(self,
                   name: str,
                   usertype: int | None = ...,
                   status: int | None = ...,
                   krb_principal: str | None = ...,
                   krb_princ_check: bool = ...) -> int: ...
    def setKrbPrincipal(self,
                        name: str,
                        krb_principal: str,
                        krb_princ_check: bool = ...) -> int: ...
    def removeKrbPrincipal(self,
                           name: str,
                           krb_principal: str) -> int: ...
    def createUserFromKerberos(self, krb_principal: str): ...
    def checkKrbPrincipal(self, krb_principal: str) -> None: ...

def get_user_groups(user_id: int) -> list[dict[str, int | str]]: ...
def get_user_perms(user_id: int) -> list[str]: ...
def get_user_data(user_id: int) -> dict[str, int | str]: ...
def login(*args, **opts) -> _SessionInfo: ...
def sslLogin(*args, **opts) -> _SessionInfo: ...
def logout(session_id: int | None = ...) -> int: ...
def subsession() -> _SessionInfo: ...
def logoutChild(session_id: int) -> None: ...
def exclusiveSession(*args, **opts) -> None: ...
def sharedSession() -> None: ...
